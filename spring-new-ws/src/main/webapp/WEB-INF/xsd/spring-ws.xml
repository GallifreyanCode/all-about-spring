<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:sws="http://www.springframework.org/schema/web-services"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services-2.0.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	

	<sws:annotation-driven />
	<!-- <sws:interceptors>
		<bean id="validatingInterceptor"
			class="org.springframework.ws.soap.server.endpoint.interceptor.PayloadValidatingInterceptor"
			p:schema="/WEB-INF/xsd/OrderService.xsd" p:validateRequest="true"
			p:validateResponse="false" />
		<bean id="loggingInterceptor"
			class="org.springframework.ws.server.endpoint.interceptor.PayloadLoggingInterceptor" />
	</sws:interceptors> -->
	
	<sws:dynamic-wsdl id="orderservice" portTypeName="OrderServicePort"
		locationUri="/" targetNamespace="http://www.liverestaurant.com/OrderService/schema">
		<sws:xsd location="/WEB-INF/xsd/OrderService.xsd" />
	</sws:dynamic-wsdl>
	
	<sws:dynamic-wsdl id="userservice" portTypeName="UserManagementPort"
		locationUri="/" targetNamespace="http://www.liverestaurant.com/OrderService/schema">
		<sws:xsd location="/WEB-INF/xsd/UserManagement.xsd" />
	</sws:dynamic-wsdl>
	
	<!-- SAAJ-specific implementation of the WebServiceMessageFactory. Wraps 
		a SAAJ MessageFactory. This factory will use SAAJ 1.3 when found, or fall 
		back to SAAJ 1.2 or even 1.1. --><!-- 
	<bean id="messageFactory" class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory" /> -->

	<!-- Requires a message factory so we declare one
	<bean
		class="org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter"
		p:messageFactory-ref="messageFactory" /> -->

	<!-- See reference at the beginning of this document
	<bean
		class="org.springframework.ws.transport.http.WsdlDefinitionHandlerAdapter" /> -->

	<!-- This is responsible for forwarding web service request to the correct 
		adapters. This is exactly similar to Spring MVC's DispatcherServlet
	<bean id="messageDispatcher" class="org.springframework.ws.server.MessageDispatcher">
		<property name="endpointAdapters">
			<list>
				<ref bean="defaultMethodEndpointAdapter" />
			</list>
		</property>
	</bean>

	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<value>
				/ws=messageDispatcher
				/ws/orderservice.wsdl=orderservice
				/ws/userservice.wsdl=userservice
			</value>
		</property>
	</bean>

	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />

	<oxm:jaxb2-marshaller id="marshaller" contextPath="be.gallifreyan.ws.model" />
	
	<bean id="marshallingPayloadMethodProcessor" class="org.springframework.ws.server.endpoint.adapter.method.MarshallingPayloadMethodProcessor">
		<constructor-arg ref="marshaller"/>
		<constructor-arg ref="marshaller"/>
	</bean>

	<bean id="defaultMethodEndpointAdapter"
		class="org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter">
		<property name="methodArgumentResolvers">
			<list>
				<ref bean="marshallingPayloadMethodProcessor" />
			</list>
		</property>
		<property name="methodReturnValueHandlers">
			<list>
				<ref bean="marshallingPayloadMethodProcessor" />
			</list>
		</property>
	</bean> -->
</beans>